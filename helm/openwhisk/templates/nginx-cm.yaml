#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-nginx-init-js
  labels:
{{ include "openwhisk.label_boilerplate" . | indent 4 }}
data:
  load.js: |
    global.js_yaml = require('yamljs');

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-nginx-config-refresh-script
  labels:
{{ include "openwhisk.label_boilerplate" . | indent 4 }}
data:
  refresh.sh: |
    function update {
      echo "Updating config...";
      cp /data/configLB.yml /tmp/configLB.yml; chown nginx:nginx /tmp/configLB.yml;
      cp /data/node_pod_map.json /tmp/node_pod_map.json; chown nginx:nginx /tmp/node_pod_map.json;
    }

    DATA='/data/'
    while [ ! -d "$DATA" ]; do
      sleep 5
    done;
    update;
    echo "Starting refresh script..."
    while sleep 1200; do
      update;
    done &

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-nginx-script-js
  labels:
{{ include "openwhisk.label_boilerplate" . | indent 4 }}
data:
  script.js: |
    var fs = require('fs');
    var js_yaml = global.js_yaml;
    var mapping_path = "/tmp/node_pod_map.json";
    var configLB_path = "/tmp/configLB.yml";
    var logs_path = "/logs/nginx_multipleLB_logs.txt";

    function redirect(r, upstream, _nginx_openwhisk_policy_index) {
        var args = ("?" + r.variables.args) || "";
        args = args + "&nginx_openwhisk_policy_index=" + _nginx_openwhisk_policy_index;
        r.variables['selected_upstream'] = upstream;
        r.internalRedirect('/controllers' + r.uri + args);
    }

    function select_upstream(r) {
      var selected_upstream_njs = "controllers";
      var action_tag = "";
      var config_refresh = false;
      var parsed_body = {};

      try {
        parsed_body = JSON.parse(r.variables.request_body);
      } catch(error) {
        parsed_body = {};
      }

      action_tag = parsed_body['tag'] || "";

      config_refresh = parsed_body['controller_config_refresh'] || false;

      if (r.method == "POST" && config_refresh == true) {
        var new_config = fs.readFileSync("/data/configLB.yml");
        var new_mapping = fs.readFileSync("/data/node_pod_map.json");

        fs.writeFileSync("/tmp/configLB.yml", new_config);
        fs.writeFileSync("/tmp/node_pod_map.json", new_mapping);
      }

      if (r.method == "POST" && action_tag != "") {
        fs.readFile(mapping_path, (error, data) => {
          if (!error) {

            var mapping = JSON.parse(data);
            var base_yaml_conf = js_yaml.load(configLB_path);
            var yaml_conf = {}
            for (let i = 0; i < base_yaml_conf.length; i++) {
                var _tag_name = Object.keys(base_yaml_conf[i]).filter(k => k != "strategy" && k != "followup")
                var _strategy = base_yaml_conf[i]["strategy"]
                var _followup = base_yaml_conf[i]["followup"]
                yaml_conf[_tag_name] = {
                    "strategy": _strategy,
                    "followup": _followup,
                    "blocks": base_yaml_conf[i][_tag_name]
                }
            }

            var re = new RegExp('^\/api\/v1\/namespaces\/[\w_]+\/actions\/');
            var action = r.uri.replace(re, "");

            var action_policy = yaml_conf[action_tag];
            var policy_blocks = [];
            var chosen_policy = 0;
            var controller_node = '*'

            if (action_policy) {
              policy_blocks = action_policy['blocks'];
              var policy_strategy = action_policy['strategy'];

              if (policy_strategy == 'random') {
                chosen_policy = Math.floor(Math.random() * policy_blocks.length);
                controller_node = policy_blocks[chosen_policy]['controller'];
              } else if (policy_strategy == 'platform') {
                controller_node = '*';
                chosen_policy = 0;
              } else if (policy_strategy == 'best_first') {
                chosen_policy = 0;
                controller_node = policy_blocks[chosen_policy]['controller'];
              } else {
                chosen_policy = 0;
                controller_node = policy_blocks[chosen_policy]['controller'];
              }

            }

            selected_upstream_njs = ((controller_node && controller_node != '*') ? mapping[controller_node] : undefined) || "controllers";

            redirect(r, selected_upstream_njs, chosen_policy);
          }
        })
      } else {
        redirect(r, selected_upstream_njs, 0)
      }
    }
    export default {select_upstream}

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-nginx
  labels:
{{ include "openwhisk.label_boilerplate" . | indent 4 }}
data:
  nginx.conf: |
    worker_processes {{ .Values.nginx.workerProcesses }};
    worker_rlimit_nofile 4096;
    load_module modules/ngx_http_js_module.so;

    events {
      worker_connections  4096;
    }

    http {
      js_path "/usr/bin/njs";
      js_import main from script.js;
      js_var $selected_upstream;

      client_max_body_size 50M;

      rewrite_log on;
      # change log format to display the upstream information
      log_format combined-upstream '$remote_addr - $remote_user [$time_local] '
          '[#tid_$request_id] $request $status $body_bytes_sent '
          '$http_referer $http_user_agent $upstream_addr';
      access_log /logs/nginx_access.log combined-upstream;
      error_log /logs/nginx_error.log error;

      # needed to enable keepalive to upstream controllers
      proxy_http_version 1.1;
      proxy_set_header Connection "";

      {{ $count := .Values.controller.replicaCount | int }}
      {{ $root := . }}

      upstream controllers {
         # Mark the controller as unavailable after fail_timeout seconds, to not get any requests during restart.
         # Otherwise, nginx would dispatch requests when the container is up, but the backend in the container not.
         # From the docs:
         #  "normally, requests with a non-idempotent method (POST, LOCK, PATCH) are not passed to
         #   the next server if a request has been sent to an upstream server"

         {{ range $v := until $count }}
         server {{ $root.Release.Name }}-controller-{{$v}}.{{ $root.Release.Name }}-controller.{{ $root.Release.Namespace }}.svc.{{ $root.Values.k8s.domain }}:{{ $root.Values.controller.port }} fail_timeout=60s;
         {{ end }}

         keepalive 512;
      }

      {{ range $v := until $count }}
      upstream {{ $root.Release.Name }}-controller-{{$v}} {

         {{ range $k := until $count -}}

         server {{ $root.Release.Name }}-controller-{{ $k }}.{{ $root.Release.Name }}-controller.{{ $root.Release.Namespace }}.svc.{{ $root.Values.k8s.domain }}:{{ $root.Values.controller.port }} fail_timeout=60s
         {{- if not (eq $v $k) }} backup{{ end }};

         {{ end }}
         keepalive 512;
      }
      {{ end }}

      server {
        listen 80;
{{- if or (eq .Values.whisk.ingress.type "NodePort") (eq .Values.whisk.ingress.type "LoadBalancer") }}
        listen 443 default ssl;
{{- end }}

        # match namespace, note while OpenWhisk allows a richer character set for a
        # namespace, not all those characters are permitted in the (sub)domain name;
        # if namespace does not match, no vanity URL rewriting takes place.
        server_name ~^(?<namespace>[0-9a-zA-Z-]+)\.{{ .Values.whisk.ingress.apiHostName }}$;

{{- if or (eq .Values.whisk.ingress.type "NodePort") (eq .Values.whisk.ingress.type "LoadBalancer") }}
        ssl_session_cache    shared:SSL:1m;
        ssl_session_timeout  10m;
        ssl_certificate      /etc/nginx/certs/tls.crt;
        ssl_certificate_key  /etc/nginx/certs/tls.key;
        {{- if .Values.nginx.certificate.external }}
        {{- if ne .Values.nginx.certificate.sslPassword "" }}
        ssl_password_file "/etc/nginx/certs/sslPassword";
        {{- end }}
        {{- end }}
        ssl_verify_client off;
        ssl_protocols        TLSv1.2;
        ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256;
        ssl_prefer_server_ciphers on;
        proxy_ssl_session_reuse on;
        proxy_ssl_verify off;
{{- end }}

        # Hack to convince nginx to dynamically resolve the dns entries.
        resolver {{ .Values.k8s.dns }};
{{- if or (eq .Values.whisk.ingress.type "NodePort") (eq .Values.whisk.ingress.type "LoadBalancer") }}
        set $apigw {{ include "openwhisk.apigw_host" . }};
{{ if or .Values.metrics.prometheusEnabled .Values.metrics.userMetricsEnabled }}
        set $grafana {{ include "openwhisk.grafana_host" . }};
{{- end }}
{{- end }}

{{- if or (eq .Values.whisk.ingress.type "NodePort") (eq .Values.whisk.ingress.type "LoadBalancer") }}
        location /api/v1/web {
            if ($namespace) {
                rewrite    /(.*) /api/v1/web/${namespace}/$1 break;
            }
            proxy_pass http://controllers;
            proxy_read_timeout 75s; # 70+5 additional seconds to allow controller to terminate request
        }

        location /api/v1 {
            js_content main.select_upstream;
            # proxy_pass http://controllers;
            proxy_read_timeout 75s; # 70+5 additional seconds to allow controller to terminate request
        }

        location /controllers {
          internal;
          rewrite /controllers/(.*) /$1 break;
          proxy_pass http://$selected_upstream;
        }

        location /api {
            proxy_pass http://$apigw:{{ .Values.apigw.mgmtPort }};
        }

        location /v1/health-check {
            proxy_pass http://$apigw:{{ .Values.apigw.apiPort }};
        }

        location /v2 {
            proxy_pass http://$apigw:{{ .Values.apigw.apiPort }};
        }

{{ if or .Values.metrics.prometheusEnabled .Values.metrics.userMetricsEnabled }}
        location /monitoring {
            proxy_pass http://$grafana:{{ .Values.grafana.port }};
        }
{{- end }}
{{- end }}
        location / {
            if ($namespace) {
              rewrite    /(.*) /api/v1/web/${namespace}/$1 break;
            }
            proxy_pass http://controllers;
            proxy_read_timeout 75s; # 70+5 additional seconds to allow controller to terminate request
        }

        location /blackbox.tar.gz {
            return 301 https://github.com/apache/openwhisk-runtime-docker/releases/download/sdk%400.1.0/blackbox-0.1.0.tar.gz;
        }
        # leaving this for a while for clients out there to update to the new endpoint
        location /blackbox-0.1.0.tar.gz {
            return 301 /blackbox.tar.gz;
        }

        location /OpenWhiskIOSStarterApp.zip {
            return 301 https://github.com/openwhisk/openwhisk-client-swift/releases/download/0.2.3/starterapp-0.2.3.zip;
        }

        # redirect requests for specific binaries to the matching one from the latest openwhisk-cli release.
        location /cli/go/download/linux/amd64 {
            return 301 https://github.com/apache/openwhisk-cli/releases/download/latest/OpenWhisk_CLI-latest-linux-amd64.tgz;
        }
        location /cli/go/download/linux/386 {
            return 301 https://github.com/apache/openwhisk-cli/releases/download/latest/OpenWhisk_CLI-latest-linux-386.tgz;
        }
        location /cli/go/download/mac/amd64 {
            return 301 https://github.com/apache/openwhisk-cli/releases/download/latest/OpenWhisk_CLI-latest-mac-amd64.zip;
        }
        location /cli/go/download/mac/386 {
            return 301 https://github.com/apache/openwhisk-cli/releases/download/latest/OpenWhisk_CLI-latest-mac-386.zip;
        }
        location /cli/go/download/windows/amd64 {
            return 301 https://github.com/apache/openwhisk-cli/releases/download/latest/OpenWhisk_CLI-latest-windows-amd64.zip;
        }
        location /cli/go/download/windows/386 {
            return 301 https://github.com/apache/openwhisk-cli/releases/download/latest/OpenWhisk_CLI-latest-windows-386.zip;
        }

        # redirect top-level cli downloads to the latest openwhisk-cli release.
        location /cli/go/download {
            return 301 https://github.com/apache/openwhisk-cli/releases/latest;
        }
      }
    }
